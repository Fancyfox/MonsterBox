{
  "code": "import { Constants } from \"../../Data/Constants\";\r\nimport { MiniGameManager } from \"../../Data/MiniGameManager\";\r\nimport { SdkUitl } from \"../../Util/SdkUitl\";\r\nimport AudioManager from \"../Singleton/AudioManager\";\r\nimport GameManager from \"../Singleton/GameManager\";\r\nimport { PanelBase, UITYpes } from \"../UI/PanelBase\";\r\nexport default class GamePage extends Laya.Script {\r\n    constructor() {\r\n        super();\r\n        this.dictPanelMap = new Map();\r\n        GamePage.instance = this;\r\n    }\r\n    onAwake() {\r\n        AudioManager.instance().loadFromCache();\r\n        this._panelLayer = this.owner.getChildByName(\"PanelLayer\");\r\n        this._popupLayer = this.owner.getChildByName(\"PopupLayer\");\r\n        this._tipLayer = this.owner.getChildByName(\"TipLayer\");\r\n        this._effectLayer = this.owner.getChildByName(\"EffectLayer\");\r\n    }\r\n    onStart() {\r\n        let level = MiniGameManager.instance().getSceneLevel();\r\n        this.showPage(Constants.UIPage.loading);\r\n        GameManager.instance().loadLevel(level).then(() => {\r\n            console.log(\"hide loading\");\r\n            this.hidePage(Constants.UIPage.loading, () => {\r\n                this.showPage(Constants.UIPage.main);\r\n                SdkUitl.loadVideoRewardAd();\r\n            });\r\n        });\r\n    }\r\n    hidePage(name, cb) {\r\n        if (this.dictPanelMap.has(name)) {\r\n            const panel = this.dictPanelMap.get(name);\r\n            if (panel.parent && panel.parent.active) {\r\n                panel.parent.active = false;\r\n            }\r\n            console.log(name, \"name+++++++\");\r\n            panel.removeSelf();\r\n            const comp = panel.getComponent(PanelBase);\r\n            if (comp && comp['hide']) {\r\n                comp['hide'].apply(comp);\r\n            }\r\n            if (cb) {\r\n                cb();\r\n            }\r\n        }\r\n    }\r\n    showPage(name, cb, ...args) {\r\n        if (this.dictPanelMap.has(name)) {\r\n            const panel = this.dictPanelMap.get(name);\r\n            const comp = panel.getComponent(PanelBase);\r\n            const parent = this.getParent(comp.type);\r\n            parent.addChild(panel);\r\n            parent.active = true;\r\n            if (comp && comp['show']) {\r\n                comp['show'].apply(comp, args);\r\n            }\r\n            cb && cb();\r\n            return;\r\n        }\r\n        let prefab = this.getPrefab(name);\r\n        console.log(prefab, \"prefab\");\r\n        let panel = prefab.create();\r\n        this.dictPanelMap.set(name, panel);\r\n        const comp = panel.getComponent(PanelBase);\r\n        const parent = this.getParent(comp.type);\r\n        parent.active = true;\r\n        parent.addChild(panel);\r\n        if (comp && comp['show']) {\r\n            comp['show'].apply(comp, args);\r\n        }\r\n        cb && cb();\r\n    }\r\n    hideAll() {\r\n        this.dictPanelMap.forEach((panel) => {\r\n            const comp = panel.getComponent(PanelBase);\r\n            if (comp && comp.isVisible) {\r\n                this.hidePage(panel.name);\r\n            }\r\n        });\r\n    }\r\n    getParent(type) {\r\n        switch (type) {\r\n            case UITYpes.PANEL:\r\n                return this._panelLayer;\r\n            case UITYpes.POPUP:\r\n                return this._popupLayer;\r\n            case UITYpes.TIP:\r\n                return this._tipLayer;\r\n            case UITYpes.EFFECT:\r\n                return this._effectLayer;\r\n        }\r\n    }\r\n    getPrefab(name) {\r\n        switch (name) {\r\n            case Constants.UIPage.main:\r\n                return this.mainPage;\r\n            case Constants.UIPage.loading:\r\n                return this.loadingPage;\r\n        }\r\n    }\r\n    getCoinPrefab() {\r\n    }\r\n}\r\nGamePage.instance = null;\r\n",
  "references": [
    "D:/WorkSpace/Laya2.6.1/MonsterBox/src/Data/Configuration.ts",
    "D:/WorkSpace/Laya2.6.1/MonsterBox/src/Data/Constants.ts",
    "D:/WorkSpace/Laya2.6.1/MonsterBox/src/Data/MiniGameManager.ts",
    "D:/WorkSpace/Laya2.6.1/MonsterBox/src/Util/SdkUitl.ts",
    "D:/WorkSpace/Laya2.6.1/MonsterBox/src/script/Singleton/AudioManager.ts",
    "D:/WorkSpace/Laya2.6.1/MonsterBox/src/script/Singleton/GameManager.ts",
    "D:/WorkSpace/Laya2.6.1/MonsterBox/src/script/UI/PanelBase.ts"
  ]
}
