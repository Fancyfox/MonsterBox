{
  "code": "import Camera from \"../../Entity/Camera\";\r\nimport Obj from \"../../Entity/Obj\";\r\n;\r\nimport Box3 from \"../Extensions/Box3\";\r\nimport EffectUtil from \"./EffectUtil\";\r\nimport EventManager from \"./EventManager\";\r\nimport GameData from \"./GameData\";\r\nimport GameDefine, { EventName, GameState } from \"./GameDefine\";\r\nvar Handler = Laya.Handler;\r\nvar Vector3 = Laya.Vector3;\r\nvar Quaternion = Laya.Quaternion;\r\nexport default class GameManager {\r\n    constructor() {\r\n        this.mapBox = new Box3();\r\n        this.water_index = 0;\r\n        this.entitys = {};\r\n        this.isGameReady = false;\r\n    }\r\n    static instance() {\r\n        if (!this._instance) {\r\n            this._instance = new GameManager();\r\n        }\r\n        return this._instance;\r\n    }\r\n    loadLevel(level) {\r\n        GameData.name_array = GameData.RandomName();\r\n        return new Promise(resolve => {\r\n            Promise.all([\r\n                this.loadScene3D(GameDefine.scenePath),\r\n                this.loadConfig(level),\r\n                this.loadSounds()\r\n            ]).then(ret => {\r\n                this.data = ret[1];\r\n                this.data.objs.sort((a, b) => a.transform[14] - b.transform[14]);\r\n                this.camera = this.scene_3d.getChildByName(\"Main Camera\");\r\n                this.camera.addComponent(Camera);\r\n                this.camera.enableHDR = false;\r\n                this.map = new Laya.Sprite3D(\"Map\", true);\r\n                this.map.transform.position = Vector3.zero;\r\n                this.map.transform.setWorldLossyScale(Vector3.one);\r\n                this.map.transform.rotation = Quaternion.DEFAULT;\r\n                this.scene_3d.addChild(this.map);\r\n                Laya.stage.getChildByName(\"root\").addChildAt(this.scene_3d, 0);\r\n            }).then(() => {\r\n                this.init().then(() => {\r\n                    this.isGameReady = true;\r\n                    console.log(\"game ready\");\r\n                    resolve();\r\n                });\r\n            });\r\n        });\r\n    }\r\n    loadScene3D(path) {\r\n        return new Promise(resolve => {\r\n            Laya.loader.create(path, Laya.Handler.create(this, () => {\r\n                this.scene_3d = Laya.loader.getRes(path);\r\n                resolve(this.scene_3d);\r\n            }));\r\n        });\r\n    }\r\n    loadConfig(level) {\r\n        let fn = GameDefine.levelRoot + 'Lv_' + level + '.json';\r\n        return new Promise(resolve => {\r\n            let t1 = new Date().getTime();\r\n            let ret = Laya.loader.load(fn, Handler.create(null, d => {\r\n                console.log('load:', fn, new Date().getTime() - t1, 'ms');\r\n                resolve(d);\r\n            }), null, Laya.Loader.JSON);\r\n            ret.once(Laya.Event.ERROR, null, url => {\r\n                console.log('load config error!', url, 'return home page');\r\n            });\r\n        });\r\n    }\r\n    loadSounds() {\r\n        return new Promise(resolve => {\r\n            let arr = [];\r\n            for (let i = 0; i < GameDefine.sounds.length; i++) {\r\n                let name = GameDefine.sounds[i];\r\n                arr.push(new Promise(resolve2 => {\r\n                    Laya.loader.create(GameDefine.soundPath + name, Handler.create(null, () => {\r\n                        resolve2();\r\n                    }));\r\n                }));\r\n            }\r\n            Promise.all(arr).then(() => {\r\n                Laya.timer.frameOnce(1, null, resolve);\r\n            });\r\n        });\r\n    }\r\n    init() {\r\n        return new Promise(resolve => {\r\n            this.mapBox.makeEmpty();\r\n            this.loadPrefabs().then(() => {\r\n                let pa = [\r\n                    this.loadObjs(),\r\n                ];\r\n                Promise.all(pa).then(() => {\r\n                    this.compileShaders();\r\n                    this.onGameReady();\r\n                    resolve();\r\n                });\r\n            });\r\n        });\r\n    }\r\n    onGameReady() {\r\n        if (!this.isGameReady) {\r\n            this.isGameReady = true;\r\n        }\r\n        EventManager.register(EventName.SCENE_CLEAR, this.clearScene, this);\r\n    }\r\n    compileShaders() {\r\n        Laya.Shader3D.compileShaderByDefineNames('BLINNPHONG', 0, 0, ['GPU_INSTANCE', 'DIRECTIONLIGHT', 'UV', 'UV1', 'SHADOWMAP_PSSM1', 'CASTSHADOW', 'FOG', 'SHADOWMAP_PCF3']);\r\n        Laya.Shader3D.compileShaderByDefineNames('BLINNPHONG', 0, 0, ['GPU_INSTANCE', 'DIRECTIONLIGHT', 'UV', 'SHADOWMAP_PSSM1', 'FOG', 'SHADOWMAP_PCF3']);\r\n        Laya.Shader3D.compileShaderByDefineNames('BLINNPHONG', 0, 0, ['GPU_INSTANCE', 'DIRECTIONLIGHT', 'UV', 'SHADOWMAP_PSSM1', 'CASTSHADOW', 'FOG', 'SHADOWMAP_PCF3']);\r\n        Laya.Shader3D.compileShaderByDefineNames('BLINNPHONG', 0, 0, ['DIRECTIONLIGHT', 'UV', 'UV1', 'SHADOWMAP_PSSM1', 'FOG', 'SHADOWMAP_PCF3']);\r\n        Laya.Shader3D.compileShaderByDefineNames('BLINNPHONG', 0, 0, ['DIRECTIONLIGHT', 'UV', 'COLOR', 'SHADOWMAP_PSSM1', 'CASTSHADOW', 'FOG', 'SHADOWMAP_PCF3']);\r\n        Laya.Shader3D.compileShaderByDefineNames('BLINNPHONG', 0, 0, ['GPU_INSTANCE', 'DIRECTIONLIGHT', 'UV', 'COLOR', 'SHADOWMAP_PSSM1', 'FOG', 'SHADOWMAP_PCF3']);\r\n        Laya.Shader3D.compileShaderByDefineNames('BLINNPHONG', 0, 0, ['DIRECTIONLIGHT', 'UV', 'COLOR', 'SHADOWMAP_PSSM1', 'FOG', 'SHADOWMAP_PCF3']);\r\n        Laya.Shader3D.compileShaderByDefineNames('BLINNPHONG', 0, 0, ['GPU_INSTANCE', 'DIRECTIONLIGHT', 'UV', 'UV1', 'SHADOWMAP_PSSM1', 'FOG', 'SHADOWMAP_PCF3']);\r\n        Laya.Shader3D.compileShaderByDefineNames('BLINNPHONG', 0, 0, ['GPU_INSTANCE', 'DIRECTIONLIGHT', 'UV', 'COLOR', 'FOG']);\r\n        Laya.Shader3D.compileShaderByDefineNames('PARTICLESHURIKEN', 0, 0, ['DIFFUSEMAP', 'FOG', 'ADDTIVEFOG', 'STRETCHEDBILLBOARD', 'COLOROVERLIFETIME', 'SIZEOVERLIFETIMECURVE', 'SHAPE', 'TINTCOLOR']);\r\n        Laya.Shader3D.compileShaderByDefineNames('PARTICLESHURIKEN', 0, 0, ['DIFFUSEMAP', 'FOG', 'SPHERHBILLBOARD', 'COLOROVERLIFETIME', 'ROTATIONOVERLIFETIMERANDOMCONSTANTS', 'SIZEOVERLIFETIMECURVE', 'ROTATIONOVERLIFETIME', 'TEXTURESHEETANIMATIONCURVE', 'SHAPE', 'TINTCOLOR']);\r\n        Laya.Shader3D.compileShaderByDefineNames('PARTICLESHURIKEN', 0, 0, ['DIFFUSEMAP', 'FOG', 'SPHERHBILLBOARD', 'ROTATIONOVERLIFETIMERANDOMCONSTANTS', 'SIZEOVERLIFETIMECURVE', 'ROTATIONOVERLIFETIMESEPERATE', 'SHAPE', 'TINTCOLOR']);\r\n        Laya.Shader3D.compileShaderByDefineNames('PARTICLESHURIKEN', 0, 0, ['DIFFUSEMAP', 'FOG', 'SPHERHBILLBOARD', 'COLOROVERLIFETIME', 'ROTATIONOVERLIFETIMERANDOMCONSTANTS', 'SIZEOVERLIFETIMECURVE', 'ROTATIONOVERLIFETIME', 'SHAPE', 'TINTCOLOR']);\r\n        Laya.Shader3D.compileShaderByDefineNames('PARTICLESHURIKEN', 0, 0, ['DIFFUSEMAP', 'FOG', 'ADDTIVEFOG', 'SPHERHBILLBOARD', 'COLOROVERLIFETIME', 'ROTATIONOVERLIFETIMERANDOMCONSTANTS', 'SIZEOVERLIFETIMECURVE', 'ROTATIONOVERLIFETIME', 'TEXTURESHEETANIMATIONCURVE', 'SHAPE', 'TINTCOLOR']);\r\n        Laya.Shader3D.compileShaderByDefineNames('BLINNPHONG', 0, 0, ['DIFFUSEMAP', 'DIRECTIONLIGHT', 'UV', 'SHADOWMAP_PSSM1', 'FOG', 'SHADOWMAP_PCF3']);\r\n        Laya.Shader3D.compileShaderByDefineNames('BLINNPHONG', 0, 0, ['GPU_INSTANCE', 'DIRECTIONLIGHT', 'UV', 'UV1', 'FOG']);\r\n        Laya.Shader3D.compileShaderByDefineNames('BLINNPHONG', 0, 0, ['GPU_INSTANCE', 'DIRECTIONLIGHT', 'UV', 'FOG']);\r\n        Laya.Shader3D.compileShaderByDefineNames('BLINNPHONG', 0, 0, ['GPU_INSTANCE', 'DIFFUSEMAP', 'DIRECTIONLIGHT', 'UV', 'TILINGOFFSET', 'FOG']);\r\n        Laya.Shader3D.compileShaderByDefineNames('BLINNPHONG', 0, 0, ['DIRECTIONLIGHT', 'UV', 'UV1', 'RECEIVESHADOW', 'FOG']);\r\n        Laya.Shader3D.compileShaderByDefineNames('BLINNPHONG', 0, 0, ['DIFFUSEMAP', 'DIRECTIONLIGHT', 'UV', 'UV1', 'RECEIVESHADOW', 'TILINGOFFSET', 'FOG']);\r\n        Laya.Shader3D.compileShaderByDefineNames('BLINNPHONG', 0, 0, ['GPU_INSTANCE', 'DIFFUSEMAP', 'DIRECTIONLIGHT', 'UV', 'UV1', 'RECEIVESHADOW', 'TILINGOFFSET', 'FOG']);\r\n    }\r\n    loadPrefabs() {\r\n        return new Promise(resolve => {\r\n            let arr = [];\r\n            for (let i = 0; i < GameDefine.preload.length; i++) {\r\n                let name = GameDefine.preload[i];\r\n                arr.push(new Promise(resolve2 => {\r\n                    Laya.Sprite3D.load(GameDefine.prefabRoot + name, Handler.create(null, (sp) => {\r\n                        this.scene_3d.addChild(sp);\r\n                        if (name == \"Turn_45_L.lh\") {\r\n                            this.setRoadMat(sp);\r\n                        }\r\n                        sp.transform.position = new Laya.Vector3(0, 0, 0);\r\n                        Laya.timer.frameOnce(1, null, a1 => {\r\n                            this.scene_3d.removeChild(a1);\r\n                            resolve2();\r\n                        }, [sp]);\r\n                    }));\r\n                }));\r\n            }\r\n            Promise.all(arr).then(() => {\r\n                Laya.timer.frameOnce(1, null, resolve);\r\n            });\r\n        });\r\n    }\r\n    setRoadMat(sp) {\r\n        let road = sp;\r\n        this.road_mat = road.meshRenderer.sharedMaterial;\r\n    }\r\n    loadObjs() {\r\n        return new Promise(resolve => {\r\n            if (this.data.objs)\r\n                this.data.objs.map(d => {\r\n                    let obj = this.loadObj(d);\r\n                    this.mapBox.expandByObject(obj.owner);\r\n                });\r\n            resolve();\r\n        });\r\n    }\r\n    loadObj(d) {\r\n        let ins = this.entitys[d.id];\r\n        if (ins)\r\n            return ins;\r\n        let tag = d.tag;\r\n        let url = GameDefine.prefabRoot + tag + '.lh';\r\n        let prefab = Laya.loader.getRes(url);\r\n        let clone = Laya.Sprite3D.instantiate(prefab, this.map);\r\n        switch (d.tag) {\r\n            default:\r\n                ins = clone.addComponent(Obj);\r\n                break;\r\n        }\r\n        ins.init(d);\r\n        this.entitys[d.id] = ins;\r\n        return ins;\r\n    }\r\n    loadSkyMat() {\r\n        let scr = GameDefine.prefabRoot + 'Assets/Materialss/SkyMat.lmat';\r\n        return new Promise(resolve => {\r\n            Laya.SkyBoxMaterial.load(scr, Laya.Handler.create(null, (m) => {\r\n                this.sky_mat = m;\r\n                resolve();\r\n            }));\r\n        });\r\n    }\r\n    loadSkyCube() {\r\n        let scr = GameDefine.prefabRoot + 'Assets/Materialss/skyCubeMap.ltc';\r\n        return new Promise(resolve => {\r\n            Laya.TextureCube.load(scr, Laya.Handler.create(null, (textC) => {\r\n                this.sky_mat.textureCube = textC;\r\n                resolve();\r\n            }));\r\n        });\r\n    }\r\n    clearScene() {\r\n        Laya.timer.clearAll(this);\r\n        Laya.timer.clearAll(null);\r\n        EffectUtil.instance.clear();\r\n        this.data = null;\r\n        this.scene_3d.removeSelf();\r\n        this.scene_3d.destroy();\r\n        this.scene_3d = null;\r\n        this.entitys = {};\r\n        EventManager.unRegisterAll();\r\n        Laya.stage.offAll();\r\n        GameDefine.gameState = GameState.None;\r\n    }\r\n}\r\nGameManager._instance = null;\r\n",
  "references": [
    "D:/WorkSpace/Laya2.6.1/MonsterBox/src/Data/Constants.ts",
    "D:/WorkSpace/Laya2.6.1/MonsterBox/src/Data/MiniGameManager.ts",
    "D:/WorkSpace/Laya2.6.1/MonsterBox/src/Entity/Camera.ts",
    "D:/WorkSpace/Laya2.6.1/MonsterBox/src/Entity/Obj.ts",
    "D:/WorkSpace/Laya2.6.1/MonsterBox/src/script/Extensions/Box3.ts",
    "D:/WorkSpace/Laya2.6.1/MonsterBox/src/script/Pages/GamePage.ts",
    "D:/WorkSpace/Laya2.6.1/MonsterBox/src/script/Singleton/AudioManager.ts",
    "D:/WorkSpace/Laya2.6.1/MonsterBox/src/script/Singleton/CannonManager.ts",
    "D:/WorkSpace/Laya2.6.1/MonsterBox/src/script/Singleton/EffectUtil.ts",
    "D:/WorkSpace/Laya2.6.1/MonsterBox/src/script/Singleton/EventManager.ts",
    "D:/WorkSpace/Laya2.6.1/MonsterBox/src/script/Singleton/GameData.ts",
    "D:/WorkSpace/Laya2.6.1/MonsterBox/src/script/Singleton/GameDefine.ts"
  ]
}
