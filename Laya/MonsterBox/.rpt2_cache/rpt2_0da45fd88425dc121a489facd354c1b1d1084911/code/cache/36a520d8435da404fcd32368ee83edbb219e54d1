{
  "code": "var Vector3 = Laya.Vector3;\r\nvar _points = [\r\n    new Vector3(),\r\n    new Vector3(),\r\n    new Vector3(),\r\n    new Vector3(),\r\n    new Vector3(),\r\n    new Vector3(),\r\n    new Vector3(),\r\n    new Vector3()\r\n];\r\nvar _vector = new Vector3();\r\nvar _v0 = new Vector3();\r\nvar _v1 = new Vector3();\r\nvar _v2 = new Vector3();\r\nvar _box;\r\nvar _f0 = new Vector3();\r\nvar _f1 = new Vector3();\r\nvar _f2 = new Vector3();\r\nvar _center = new Vector3();\r\nvar _extents = new Vector3();\r\nvar _triangleNormal = new Vector3();\r\nvar _testAxis = new Vector3();\r\nexport default class Box3 {\r\n    constructor(min, max) {\r\n        this.min = (min !== undefined) ? min : new Vector3(+Infinity, +Infinity, +Infinity);\r\n        this.max = (max !== undefined) ? max : new Vector3(-Infinity, -Infinity, -Infinity);\r\n    }\r\n    set(min, max) {\r\n        this.min.copy(min);\r\n        this.max.copy(max);\r\n        return this;\r\n    }\r\n    setFromArray(array) {\r\n        var minX = +Infinity;\r\n        var minY = +Infinity;\r\n        var minZ = +Infinity;\r\n        var maxX = -Infinity;\r\n        var maxY = -Infinity;\r\n        var maxZ = -Infinity;\r\n        for (var i = 0, l = array.length; i < l; i += 3) {\r\n            var x = array[i];\r\n            var y = array[i + 1];\r\n            var z = array[i + 2];\r\n            if (x < minX)\r\n                minX = x;\r\n            if (y < minY)\r\n                minY = y;\r\n            if (z < minZ)\r\n                minZ = z;\r\n            if (x > maxX)\r\n                maxX = x;\r\n            if (y > maxY)\r\n                maxY = y;\r\n            if (z > maxZ)\r\n                maxZ = z;\r\n        }\r\n        this.min.set(minX, minY, minZ);\r\n        this.max.set(maxX, maxY, maxZ);\r\n        return this;\r\n    }\r\n    setFromPoints(points) {\r\n        this.makeEmpty();\r\n        for (var i = 0, il = points.length; i < il; i++) {\r\n            this.expandByPoint(points[i]);\r\n        }\r\n        return this;\r\n    }\r\n    setFromCenterAndSize(center, size) {\r\n        var halfSize = _vector.copy(size).mult(0.5);\r\n        this.min.copy(center).vsub(halfSize, this.min);\r\n        this.max.copy(center).vadd(halfSize, this.max);\r\n        return this;\r\n    }\r\n    setFromObject(object) {\r\n        this.makeEmpty();\r\n        return this.expandByObject(object);\r\n    }\r\n    copy(box) {\r\n        this.min.copy(box.min);\r\n        this.max.copy(box.max);\r\n        return this;\r\n    }\r\n    clone() {\r\n        return new Box3().copy(this);\r\n    }\r\n    makeEmpty() {\r\n        this.min.x = this.min.y = this.min.z = +Infinity;\r\n        this.max.x = this.max.y = this.max.z = -Infinity;\r\n        return this;\r\n    }\r\n    isEmpty() {\r\n        return (this.max.x < this.min.x) || (this.max.y < this.min.y) || (this.max.z < this.min.z);\r\n    }\r\n    getCenter(target) {\r\n        var target = target || new Vector3();\r\n        if (this.isEmpty())\r\n            target.set(0, 0, 0);\r\n        else {\r\n            this.min.vadd(this.max, target);\r\n            target.mult(0.5, target);\r\n        }\r\n        return target;\r\n    }\r\n    getSize(target) {\r\n        var target = target || new Vector3();\r\n        if (this.isEmpty())\r\n            target.set(0, 0, 0);\r\n        else {\r\n            this.max.vsub(this.min, target);\r\n        }\r\n        return target;\r\n    }\r\n    expandByPoint(point) {\r\n        this.min.min(point);\r\n        this.max.max(point);\r\n        return this;\r\n    }\r\n    expandByVector(vector) {\r\n        this.min.vsub(vector, this.min);\r\n        this.max.vadd(vector, this.max);\r\n        return this;\r\n    }\r\n    expandByScalar(scalar) {\r\n        this.min.x -= scalar;\r\n        this.min.y -= scalar;\r\n        this.min.z -= scalar;\r\n        this.max.x += scalar;\r\n        this.max.y += scalar;\r\n        this.max.z += scalar;\r\n        return this;\r\n    }\r\n    expandByObject(object) {\r\n        if (object instanceof Laya.MeshSprite3D) {\r\n            let m = object;\r\n            m.meshFilter.sharedMesh.calculateBounds();\r\n            if (!_box)\r\n                _box = new Box3();\r\n            _box.set(m.meshFilter.sharedMesh.bounds.getMin(), m.meshFilter.sharedMesh.bounds.getMax());\r\n            _box.applyMatrix4(object.transform.worldMatrix);\r\n            this.union(_box);\r\n        }\r\n        var children = [];\r\n        for (let i = 0; i < object.numChildren; i++) {\r\n            children.push(object.getChildAt(i));\r\n        }\r\n        for (var i = 0, l = children.length; i < l; i++) {\r\n            this.expandByObject(children[i]);\r\n        }\r\n        return this;\r\n    }\r\n    containsPoint(point) {\r\n        return point.x < this.min.x || point.x > this.max.x ||\r\n            point.y < this.min.y || point.y > this.max.y ||\r\n            point.z < this.min.z || point.z > this.max.z ? false : true;\r\n    }\r\n    containsBox(box) {\r\n        return this.min.x <= box.min.x && box.max.x <= this.max.x &&\r\n            this.min.y <= box.min.y && box.max.y <= this.max.y &&\r\n            this.min.z <= box.min.z && box.max.z <= this.max.z;\r\n    }\r\n    getParameter(point, target) {\r\n        var target = target || new Vector3();\r\n        target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\r\n        return target;\r\n    }\r\n    intersectsBox(box) {\r\n        return box.max.x < this.min.x || box.min.x > this.max.x ||\r\n            box.max.y < this.min.y || box.min.y > this.max.y ||\r\n            box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\r\n    }\r\n    applyMatrix4(matrix) {\r\n        if (this.isEmpty())\r\n            return this;\r\n        _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);\r\n        _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);\r\n        _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);\r\n        _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);\r\n        _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);\r\n        _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);\r\n        _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);\r\n        _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);\r\n        this.setFromPoints(_points);\r\n        return this;\r\n    }\r\n    union(box) {\r\n        this.min = this.min.min(box.min);\r\n        this.max = this.max.max(box.max);\r\n        return this;\r\n    }\r\n    intersect(box) {\r\n        this.min.max(box.min);\r\n        this.max.min(box.max);\r\n        if (this.isEmpty())\r\n            this.makeEmpty();\r\n        return this;\r\n    }\r\n}\r\n",
  "references": []
}
