{
  "code": "export default class TimerUtil {\r\n    static start(targetObj, callback, interval, repeatTimes = -1, endCallback = null, ...args) {\r\n        let timerObj = {\r\n            target: targetObj,\r\n            callback: callback,\r\n            interval: interval,\r\n            repeatTimes: repeatTimes,\r\n            endCallback: endCallback,\r\n            curTimes: 0,\r\n            args: args\r\n        };\r\n        if (!callback || !callback.apply) {\r\n            console.trace();\r\n        }\r\n        let mapObj = {\r\n            timerId: 0,\r\n            timerObj: timerObj\r\n        };\r\n        mapObj.timerId = setInterval(this._getIntervalCallback(mapObj).bind(this), interval);\r\n        this._add(mapObj);\r\n        return mapObj.timerId;\r\n    }\r\n    static clear(obj) {\r\n        if (typeof obj === 'number') {\r\n            this._clear(obj);\r\n            return;\r\n        }\r\n        if (obj instanceof Array) {\r\n            while (obj.length) {\r\n                let item = obj.pop();\r\n                typeof item === 'number' && this._clear(item);\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    static _clear(timerId) {\r\n        timerId = timerId >> 0;\r\n        if (timerId < 0) {\r\n            return;\r\n        }\r\n        clearInterval(timerId);\r\n        let timerObj = this._has(timerId);\r\n        if (!timerObj) {\r\n            return;\r\n        }\r\n        this._timerMap.delete(timerId);\r\n    }\r\n    static _add(timerObj) {\r\n        this._timerMap = this._timerMap || new Map();\r\n        this._timerMap.set(timerObj.timerId, timerObj);\r\n    }\r\n    static _has(timerId) {\r\n        timerId = timerId >> 0;\r\n        if (timerId < 0 || !this._timerMap || !this._timerMap.has(timerId)) {\r\n            return false;\r\n        }\r\n        return this._timerMap.get(timerId);\r\n    }\r\n    static _getIntervalCallback(timerObj) {\r\n        return function () {\r\n            let iTimerObj = timerObj.timerObj;\r\n            iTimerObj.curTimes++;\r\n            iTimerObj.callback.call(iTimerObj.target, iTimerObj.args);\r\n            if (iTimerObj.repeatTimes > 0 && iTimerObj.curTimes >= iTimerObj.repeatTimes) {\r\n                this._clear(timerObj.timerId);\r\n                if (iTimerObj.endCallback) {\r\n                    iTimerObj.endCallback.call(iTimerObj.target);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\nTimerUtil._timerMap = null;\r\n",
  "references": []
}
